name: Issue Management

on:
  workflow_call:


env:
  ORGANIZATION: kadel-org
  # See https://github.com/redhat-developer/odo/projects?query=is%3Aopen
  PROJECT_NUMBER: 1

jobs:
  manage_issue_labels:
    name: Label issue
    if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
    runs-on: ubuntu-latest
    concurrency: issue_labels-${{ github.event.issue.number }}
    permissions:
      issues: write
    steps:
    - name: Add needs-triage label
      # Action recommended in https://docs.github.com/en/actions/managing-issues-and-pull-requests/adding-labels-to-issues
      # Recommended to pin unofficial Actions to a specific commit SHA
      uses: andymckay/labeler@3a4296e9dcdf9576b0456050db78cfd34853f260
      with:
        add-labels: "needs-triage"
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  manage_issue_in_project:
    name: Manage issue in Project
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: manage_issue_labels
    concurrency: issue_management_in_project-${{ github.event.issue.number }}-${{ github.event.action }}
    env:
      # Personal Access Token (PAT) to be created with 'repo' and 'project' scopes and be added as repository secret.
      GITHUB_TOKEN: ${{ secrets.PROJECT_MANAGEMENT_TOKEN }}
    steps:

    - name: Get project data
      run: |
        gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
        
        cat project_data.json
        
        echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_URGENT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("Urgent")) |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_HIGH_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("High")) |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_MEDIUM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("Medium")) |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_LOW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("Low")) |.id' project_data.json) >> $GITHUB_ENV

    - name: Add issue to Project
      env:
        ISSUE_ID: ${{ github.event.issue.node_id }}
      run: |
        gh api graphql -f query='
          mutation($project: ID!, $issue: ID!) {
            addProjectV2ItemById(
              input: {
                projectId: $project
                contentId: $issue
              }
            ) {
              item {
                id
              }
            }
          }' -f project=${{ env.PROJECT_ID }} -f issue=$ISSUE_ID > project_mutation_result.json
        
        cat project_mutation_result.json
        
        echo 'ITEM_ID='$(jq '.data.addProjectV2ItemById.item.id' project_mutation_result.json) >> $GITHUB_ENV
